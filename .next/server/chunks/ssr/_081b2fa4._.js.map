{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 24, "column": 0}, "map": {"version":3,"sources":["file://C%3A/reactTestData/portfolio/src/component/Card/card.tsx"],"sourcesContent":["import React from 'react';\r\nimport { format } from 'date-fns';\r\n\r\n// Utility functions (import or define these in your project)\r\n// import { generateChartData, getColor } from '../utils/chartUtils';\r\n\r\nfunction generateChartData() {\r\n  // placeholder: replace with your real data generator or prop\r\n  const today = new Date();\r\n  const data = [];\r\n  for (let i = 0; i < 180; i++) {\r\n    const date = new Date(today);\r\n    date.setDate(today.getDate() - i);\r\n    data.unshift({\r\n      date: date.toISOString().split('T')[0],\r\n      count: Math.floor(Math.random() * 5),\r\n    });\r\n  }\r\n  return data;\r\n}\r\n\r\nfunction getColor(count: number) {\r\n  if (count === 0) return '#ebedf0';\r\n  if (count < 2) return '#9be9a8';\r\n  if (count < 4) return '#40c463';\r\n  return '#30a14e';\r\n}\r\n\r\ntype CardProps = {\r\n  name: string;\r\n  description: string;\r\n  ButtonLink: string;\r\n};\r\n\r\nconst Card: React.FC<CardProps> = ({ name, description, ButtonLink }) => {\r\n  // Prepare heatmap data\r\n  const data = generateChartData();\r\n  const weeks: { date: string; count: number }[][] = [];\r\n\r\n  for (let i = 0; i < data.length; i += 7) {\r\n    weeks.push(data.slice(i, i + 7));\r\n  }\r\n\r\n  const totalSubmissions = data.reduce((sum, d) => sum + d.count, 0);\r\n\r\n  // Generate month labels\r\n  const monthLabels: { name: string; width: number }[] = [];\r\n  let currentMonth = '';\r\n  let count = 0;\r\n\r\n  weeks.forEach((week) => {\r\n    const firstDay = week[0];\r\n    const month = format(new Date(firstDay.date), 'MMM');\r\n\r\n    if (month !== currentMonth) {\r\n      if (currentMonth !== '') {\r\n        monthLabels[monthLabels.length - 1].width = count;\r\n      }\r\n      monthLabels.push({ name: month, width: 1 });\r\n      currentMonth = month;\r\n      count = 1;\r\n    } else {\r\n      count++;\r\n    }\r\n  });\r\n  if (monthLabels.length) {\r\n    monthLabels[monthLabels.length - 1].width = count;\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex flex-col lg:flex-row bg-white rounded-lg shadow p-6 w-full\">\r\n      {/* Content Section */}\r\n      <div className=\"flex-1 lg:pr-6\">\r\n        <h3 className=\"text-xl font-semibold text-gray-900\">{name}</h3>\r\n        <p className=\"mt-2 text-gray-700\">{description}</p>\r\n        <button\r\n          onClick={() => window.open(ButtonLink, '_blank')}\r\n          className=\"mt-4 inline-block px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition\"\r\n        >\r\n          View Link\r\n        </button>\r\n        <p className=\"mt-1 text-sm text-gray-500\">{totalSubmissions} Submissions in past 6 months</p>\r\n      </div>\r\n\r\n      {/* Heatmap Section */}\r\n      <div className=\"flex-1 mt-6 lg:mt-0 overflow-x-auto\">\r\n        <div className=\"flex text-xs text-gray-500 mb-1 ml-2 gap-3\">\r\n          {monthLabels.map((month, idx) => (\r\n            <div key={idx} style={{ width: `${month.width * 12}px` }}>\r\n              {month.name}\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div className=\"grid grid-flow-col auto-cols-max gap-x-1.5 px-2\">\r\n          {weeks.map((week, wi) => (\r\n            <div key={wi} className=\"flex flex-col\">\r\n              {week.map((day, di) => (\r\n                <div\r\n                  key={di}\r\n                  title={`${day.count} submissions on ${day.date}`}\r\n                  className=\"w-3 h-3 rounded-sm m-0.5\"\r\n                  style={{ backgroundColor: getColor(day.count) }}\r\n                />\r\n              ))}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n"],"names":[],"mappings":";;;;AACA;;;AAEA,6DAA6D;AAC7D,qEAAqE;AAErE,SAAS;IACP,6DAA6D;IAC7D,MAAM,QAAQ,IAAI;IAClB,MAAM,OAAO,EAAE;IACf,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,IAAK;QAC5B,MAAM,OAAO,IAAI,KAAK;QACtB,KAAK,OAAO,CAAC,MAAM,OAAO,KAAK;QAC/B,KAAK,OAAO,CAAC;YACX,MAAM,KAAK,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE;YACtC,OAAO,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK;QACpC;IACF;IACA,OAAO;AACT;AAEA,SAAS,SAAS,KAAa;IAC7B,IAAI,UAAU,GAAG,OAAO;IACxB,IAAI,QAAQ,GAAG,OAAO;IACtB,IAAI,QAAQ,GAAG,OAAO;IACtB,OAAO;AACT;AAQA,MAAM,OAA4B,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,UAAU,EAAE;IAClE,uBAAuB;IACvB,MAAM,OAAO;IACb,MAAM,QAA6C,EAAE;IAErD,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,MAAM,EAAE,KAAK,EAAG;QACvC,MAAM,IAAI,CAAC,KAAK,KAAK,CAAC,GAAG,IAAI;IAC/B;IAEA,MAAM,mBAAmB,KAAK,MAAM,CAAC,CAAC,KAAK,IAAM,MAAM,EAAE,KAAK,EAAE;IAEhE,wBAAwB;IACxB,MAAM,cAAiD,EAAE;IACzD,IAAI,eAAe;IACnB,IAAI,QAAQ;IAEZ,MAAM,OAAO,CAAC,CAAC;QACb,MAAM,WAAW,IAAI,CAAC,EAAE;QACxB,MAAM,QAAQ,CAAA,GAAA,qJAAA,CAAA,SAAM,AAAD,EAAE,IAAI,KAAK,SAAS,IAAI,GAAG;QAE9C,IAAI,UAAU,cAAc;YAC1B,IAAI,iBAAiB,IAAI;gBACvB,WAAW,CAAC,YAAY,MAAM,GAAG,EAAE,CAAC,KAAK,GAAG;YAC9C;YACA,YAAY,IAAI,CAAC;gBAAE,MAAM;gBAAO,OAAO;YAAE;YACzC,eAAe;YACf,QAAQ;QACV,OAAO;YACL;QACF;IACF;IACA,IAAI,YAAY,MAAM,EAAE;QACtB,WAAW,CAAC,YAAY,MAAM,GAAG,EAAE,CAAC,KAAK,GAAG;IAC9C;IAEA,qBACE,8OAAC;QAAI,WAAU;;0BAEb,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAG,WAAU;kCAAuC;;;;;;kCACrD,8OAAC;wBAAE,WAAU;kCAAsB;;;;;;kCACnC,8OAAC;wBACC,SAAS,IAAM,OAAO,IAAI,CAAC,YAAY;wBACvC,WAAU;kCACX;;;;;;kCAGD,8OAAC;wBAAE,WAAU;;4BAA8B;4BAAiB;;;;;;;;;;;;;0BAI9D,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAI,WAAU;kCACZ,YAAY,GAAG,CAAC,CAAC,OAAO,oBACvB,8OAAC;gCAAc,OAAO;oCAAE,OAAO,GAAG,MAAM,KAAK,GAAG,GAAG,EAAE,CAAC;gCAAC;0CACpD,MAAM,IAAI;+BADH;;;;;;;;;;kCAKd,8OAAC;wBAAI,WAAU;kCACZ,MAAM,GAAG,CAAC,CAAC,MAAM,mBAChB,8OAAC;gCAAa,WAAU;0CACrB,KAAK,GAAG,CAAC,CAAC,KAAK,mBACd,8OAAC;wCAEC,OAAO,GAAG,IAAI,KAAK,CAAC,gBAAgB,EAAE,IAAI,IAAI,EAAE;wCAChD,WAAU;wCACV,OAAO;4CAAE,iBAAiB,SAAS,IAAI,KAAK;wCAAE;uCAHzC;;;;;+BAHD;;;;;;;;;;;;;;;;;;;;;;AAetB;uCAEe","debugId":null}},
    {"offset": {"line": 198, "column": 0}, "map": {"version":3,"sources":["file://C%3A/reactTestData/portfolio/src/app/Home/page.tsx"],"sourcesContent":["import React from 'react'\r\nimport Card from '@/component/Card/card'\r\n\r\nconst home = () => {\r\n  return (\r\n    <>\r\n     <div>\r\n       <Card name='Mukul Sharma'\r\n        description=\"I'm a passionate Software Engineer with over 4 years of hands-on coding experience, specializing in React, Next.js, and Node.js. I excel at building high-performance web applications and enjoy solving complex challenges with innovative solutions.\" \r\n        buttonLink='View Detail' />\r\n    </div>\r\n    </>\r\n   \r\n  )\r\n}\r\n\r\nexport default home"],"names":[],"mappings":";;;;AACA;;;AAEA,MAAM,OAAO;IACX,qBACE;kBACC,cAAA,8OAAC;sBACC,cAAA,8OAAC,iIAAA,CAAA,UAAI;gBAAC,MAAK;gBACV,aAAY;gBACZ,YAAW;;;;;;;;;;;;AAKnB;uCAEe","debugId":null}}]
}